// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251013204843_AddExamUniqueIndexes")]
    partial class AddExamUniqueIndexes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("ExaminerID")
                        .HasColumnType("int");

                    b.Property<byte>("Grade")
                        .HasColumnType("tinyint");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.Property<int?>("SupervisorID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("ExaminerID");

                    b.HasIndex("SubjectID");

                    b.HasIndex("SupervisorID");

                    b.HasIndex("StudentID", "SubjectID")
                        .IsUnique()
                        .HasDatabaseName("UX_Exam_PassOnce")
                        .HasFilter("[Grade] >= 6");

                    b.HasIndex("StudentID", "SubjectID", "Date")
                        .IsUnique()
                        .HasDatabaseName("UX_Exam_Student_Subject_Date");

                    b.ToTable("Exam", null, t =>
                        {
                            t.HasTrigger("trg_Exam_UpdateGpa");

                            t.HasCheckConstraint("CK_Exam_Grade", "[Grade] BETWEEN 5 AND 10");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Domain.Entity.Person", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Age")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("int")
                        .HasComputedColumnSql("DATEDIFF(YEAR, [DateOfBirth], GETDATE()) - CASE WHEN FORMAT(GETDATE(),'MMdd') < FORMAT([DateOfBirth],'MMdd') THEN 1 ELSE 0 END", false);

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("char(13)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("JMBG")
                        .IsUnique();

                    b.ToTable("Person", null, t =>
                        {
                            t.HasCheckConstraint("CK_Person_DateOfBirth_Range", "[DateOfBirth] >= '1900-01-01' AND [DateOfBirth] <= '2008-12-31'");

                            t.HasCheckConstraint("CK_Person_JMBG_13Digits", "LEN([JMBG]) = 13 AND PATINDEX('%[^0-9]%', [JMBG]) = 0");

                            t.HasCheckConstraint("CK_Person_JMBG_DateOfBirth", "LEFT([JMBG], 7) =     RIGHT('00' + CAST(DATEPART(DAY, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('00' + CAST(DATEPART(MONTH, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('000' + CAST(DATEPART(YEAR, [DateOfBirth]) AS varchar(4)), 3)");
                        });

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<byte>("ESPB")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ID");

                    b.ToTable("Subject", null, t =>
                        {
                            t.HasCheckConstraint("CK_Subject_Espb", "[ESPB] BETWEEN 1 AND 60");
                        });
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasBaseType("Domain.Entity.Person");

                    b.Property<string>("IndexNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasIndex("IndexNumber")
                        .IsUnique()
                        .HasFilter("[IndexNumber] IS NOT NULL");

                    b.ToTable("Student", null, t =>
                        {
                            t.HasCheckConstraint("CK_Person_DateOfBirth_Range", "[DateOfBirth] >= '1900-01-01' AND [DateOfBirth] <= '2008-12-31'");

                            t.HasCheckConstraint("CK_Person_JMBG_13Digits", "LEN([JMBG]) = 13 AND PATINDEX('%[^0-9]%', [JMBG]) = 0");

                            t.HasCheckConstraint("CK_Person_JMBG_DateOfBirth", "LEFT([JMBG], 7) =     RIGHT('00' + CAST(DATEPART(DAY, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('00' + CAST(DATEPART(MONTH, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('000' + CAST(DATEPART(YEAR, [DateOfBirth]) AS varchar(4)), 3)");

                            t.HasCheckConstraint("CK_Student_IndexNumber_Format", "[IndexNumber] NOT LIKE '%[^0-9/]%' AND CHARINDEX('/', [IndexNumber]) = 5 AND LEN([IndexNumber]) BETWEEN 6 AND 10 AND RIGHT([IndexNumber], LEN([IndexNumber]) - 5) NOT LIKE '%[^0-9]%'");
                        });
                });

            modelBuilder.Entity("Domain.Entity.Teacher", b =>
                {
                    b.HasBaseType("Domain.Entity.Person");

                    b.Property<byte>("Title")
                        .HasColumnType("tinyint");

                    b.ToTable("Teacher", null, t =>
                        {
                            t.HasCheckConstraint("CK_Person_DateOfBirth_Range", "[DateOfBirth] >= '1900-01-01' AND [DateOfBirth] <= '2008-12-31'");

                            t.HasCheckConstraint("CK_Person_JMBG_13Digits", "LEN([JMBG]) = 13 AND PATINDEX('%[^0-9]%', [JMBG]) = 0");

                            t.HasCheckConstraint("CK_Person_JMBG_DateOfBirth", "LEFT([JMBG], 7) =     RIGHT('00' + CAST(DATEPART(DAY, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('00' + CAST(DATEPART(MONTH, [DateOfBirth]) AS varchar(2)), 2) +    RIGHT('000' + CAST(DATEPART(YEAR, [DateOfBirth]) AS varchar(4)), 3)");

                            t.HasCheckConstraint("CK_Teacher_Title", "[Title] BETWEEN 1 AND 4");
                        });
                });

            modelBuilder.Entity("Domain.Entity.Exam", b =>
                {
                    b.HasOne("Domain.Entity.Teacher", "Examiner")
                        .WithMany("ExamsAsExaminer")
                        .HasForeignKey("ExaminerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Student", "Student")
                        .WithMany("Exams")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entity.Teacher", "Supervisor")
                        .WithMany("ExamsAsSupervisor")
                        .HasForeignKey("SupervisorID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Examiner");

                    b.Navigation("Student");

                    b.Navigation("Subject");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.HasOne("Domain.Entity.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entity.Student", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Teacher", b =>
                {
                    b.HasOne("Domain.Entity.Person", null)
                        .WithOne()
                        .HasForeignKey("Domain.Entity.Teacher", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entity.Subject", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Domain.Entity.Student", b =>
                {
                    b.Navigation("Exams");
                });

            modelBuilder.Entity("Domain.Entity.Teacher", b =>
                {
                    b.Navigation("ExamsAsExaminer");

                    b.Navigation("ExamsAsSupervisor");
                });
#pragma warning restore 612, 618
        }
    }
}
